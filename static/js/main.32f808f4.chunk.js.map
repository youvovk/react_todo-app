{"version":3,"sources":["component/TodoItem.js","component/TodoList.js","component/TodoFilter.js","App.js","index.js"],"names":["_","require","TodoItem","_ref","todo","toggleCompleteStatus","toggleRemoveTodo","react_default","a","createElement","key","uniqueId","className","type","onChange","id","checked","completed","htmlFor","title","onClick","TodoList","todoListFiltered","toggleEditTodo","map","component_TodoItem","TodoFilter","toggleShowActive","toggleShowAll","toggleShowCompleted","activeFilter","href","App","state","todoList","textNewTodo","ruleForAllCompleted","saveStorage","addNewTodo","event","preventDefault","idForTodos","_this","replace","setState","prevState","concat","Object","toConsumableArray","handleNewTodoText","value","target","_ref2","_objectSpread","toggleCompleteAllStatus","some","filter","_ref3","toggleRemoveAllCompleted","_ref4","JSON","parse","localStorage","getItem","this","handleFormSubmit","_this$state","setItem","stringify","_this$state2","countedLeft","item","length","onSubmit","placeholder","style","display","Fragment","component_TodoList","component_TodoFilter","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.32f808f4.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst _ = require('lodash');\n\nconst TodoItem = ({\n  todo,\n  toggleCompleteStatus,\n  toggleRemoveTodo,\n}) => (\n  <li key={_.uniqueId('todo_')} className=\"\">\n    <div className=\"view\">\n      <input\n        key={_.uniqueId('')}\n        type=\"checkbox\"\n        className=\"toggle\"\n        onChange={() => toggleCompleteStatus(todo.id)}\n        id={todo.id}\n        checked={todo.completed}\n      />\n      <label\n        htmlFor=\"todo-1\"\n        className={todo.completed ? 'toggle_line-through' : ''}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => toggleRemoveTodo(todo.id)}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.string,\n  }).isRequired,\n  toggleCompleteStatus: PropTypes.func.isRequired,\n  toggleRemoveTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nconst _ = require('lodash');\n\nconst TodoList = ({\n  todoListFiltered,\n  toggleCompleteStatus,\n  toggleRemoveTodo,\n  toggleEditTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {\n      todoListFiltered.map(todo => (\n        <TodoItem\n          todo={todo}\n          toggleCompleteStatus={toggleCompleteStatus}\n          toggleRemoveTodo={toggleRemoveTodo}\n          toggleEditTodo={toggleEditTodo}\n          key={_.uniqueId('todo-item_')}\n        />\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todoListFiltered: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      completed: PropTypes.string,\n    })\n  ).isRequired,\n  toggleCompleteStatus: PropTypes.func.isRequired,\n  toggleRemoveTodo: PropTypes.func.isRequired,\n  toggleEditTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst TodoFilter = ({\n  toggleShowActive,\n  toggleShowAll,\n  toggleShowCompleted,\n  activeFilter,\n}) => (\n  (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={activeFilter === false ? 'selected' : ''}\n          onClick={toggleShowAll}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={activeFilter === 'Active' ? 'selected' : ''}\n          onClick={toggleShowActive}\n        >\n            Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={activeFilter === 'Completed' ? 'selected' : ''}\n          onClick={toggleShowCompleted}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  )\n);\n\nTodoFilter.propTypes = {\n  toggleShowActive: PropTypes.func.isRequired,\n  toggleShowAll: PropTypes.func.isRequired,\n  toggleShowCompleted: PropTypes.func.isRequired,\n  activeFilter: PropTypes.bool.isRequired,\n};\n\nexport default TodoFilter;\n","import React from 'react';\n\nimport TodoList from './component/TodoList';\nimport TodoFilter from './component/TodoFilter';\n\nconst _ = require('lodash');\n//const classNames = require('classnames');\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    todoListFiltered: [],\n    textNewTodo: '',\n    ruleForAllCompleted: true,\n    activeFilter: false,\n    saveStorage: false,\n  };\n\n  componentDidMount() {\n    const saveStorage = JSON.parse(localStorage.getItem('saveStorage'));\n\n    if (saveStorage) {\n      const todoList = JSON\n        .parse(localStorage.getItem('todoList'));\n      const todoListFiltered = JSON\n        .parse(localStorage.getItem('todoListFiltered'));\n      const ruleForAllCompleted = JSON\n        .parse(localStorage.getItem('ruleForAllCompleted'));\n\n      this.setState({\n        saveStorage,\n        todoList,\n        todoListFiltered,\n        ruleForAllCompleted,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.handleFormSubmit();\n  }\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    const idForTodos = _.uniqueId('todo_');\n\n    if (this.state.textNewTodo.replace(/\\s/g, '') !== '') {\n      this.setState(prevState => ({\n        todoList: [...prevState.todoList,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n        todoListFiltered: [...prevState.todoListFiltered,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n        textNewTodo: '',\n        saveStorage: true,\n      }));\n    }\n  };\n\n  handleNewTodoText = ({ target: { value } }) => {\n    this.setState({\n      textNewTodo: value.replace(/^\\s+/, ''),\n    });\n  };\n\n  toggleCompleteStatus = (id) => {\n    const { activeFilter } = this.state;\n\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n      todoListFiltered: todoListFiltered.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n    }));\n\n    if (activeFilter === 'Completed') {\n      this.toggleShowCompleted();\n    }\n\n    if (activeFilter === 'Active') {\n      this.toggleShowActive();\n    }\n  };\n\n  toggleCompleteAllStatus = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoListFiltered\n        .map(todo => ({ ...todo,\n          completed: prevState.todoListFiltered\n            .some(todo => todo.completed === false) ? true : false })),\n      todoList: prevState.todoList\n        .map(todo => ({ ...todo,\n          completed: prevState.todoList\n            .some(todo => todo.completed === false) ? true : false })),\n      ruleForAllCompleted: !prevState.ruleForAllCompleted,\n    }));\n  };\n\n  toggleShowAll = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoList\n        .map(todo => ({ ...todo })),\n      activeFilter: false,\n    }));\n  };\n\n  toggleShowActive = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoList\n        .filter(todo => todo.completed === false),\n      activeFilter: 'Active',\n    }));\n  };\n\n  toggleShowCompleted = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoList\n        .filter(todo => todo.completed === true),\n      activeFilter: 'Completed',\n    }));\n  };\n\n  toggleRemoveTodo = (id) => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (todo.id !== id)),\n      todoListFiltered: todoListFiltered.filter(todo => (todo.id !== id))\n    }));\n  };\n\n  toggleRemoveAllCompleted = () => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (!todo.completed)),\n      todoListFiltered: todoListFiltered.filter(todo => (!todo.completed)),\n    }));\n  };\n\n  handleFormSubmit() {\n    const {\n      todoList,\n      todoListFiltered,\n      ruleForAllCompleted,\n      saveStorage,\n    } = this.state;\n\n    localStorage.setItem('saveStorage',\n      JSON.stringify(saveStorage));\n    localStorage.setItem('todoList',\n      JSON.stringify(todoList));\n    localStorage.setItem('todoListFiltered',\n      JSON.stringify(todoListFiltered));\n    localStorage.setItem('ruleForAllCompleted',\n      JSON.stringify(ruleForAllCompleted));\n  }\n\n  render() {\n    const {\n      textNewTodo,\n      todoListFiltered,\n      activeFilter,\n      todoList,\n    } = this.state;\n    const countedLeft = todoListFiltered.filter(item => !item.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addNewTodo}>\n            <input\n              value={textNewTodo}\n              onChange={this.handleNewTodoText}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          {\n            !!todoList.length && (\n              <>\n                <input\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                  onChange={this.toggleCompleteAllStatus}\n                />\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\n              </>\n            )\n          }\n\n          <TodoList\n            todoListFiltered={todoListFiltered}\n            toggleCompleteStatus={this.toggleCompleteStatus}\n            toggleRemoveTodo={this.toggleRemoveTodo}\n          />\n        </section>\n\n        {\n          !!todoList.length && (\n            <footer className=\"footer\" style={{ display: 'block' }}>\n              <span className=\"todo-count\">\n                {countedLeft}\n                {' '}\n                item\n                {countedLeft !== 1 && 's'}\n                {' '}\n                left\n              </span>\n\n              <TodoFilter\n                toggleShowActive={this.toggleShowActive}\n                toggleShowAll={this.toggleShowAll}\n                toggleShowCompleted={this.toggleShowCompleted}\n                activeFilter={activeFilter}\n              />\n\n              {\n                !!todoList.some(todo => todo.completed) && (\n                  <button\n                    type=\"button\"\n                    className=\"clear-completed\"\n                    style={{ display: 'block' }}\n                    onClick={this.toggleRemoveAllCompleted}\n                  >\n                    Clear completed\n                  </button>\n                )\n              }\n\n            </footer>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
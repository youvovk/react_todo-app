{"version":3,"sources":["component/TodoItem.js","component/TodoList.js","component/TodoFilter.js","App.js","index.js"],"names":["_","require","classNames","TodoItem","state","editedText","isEditing","handleEditedText","_ref","value","target","_this","setState","activateEditing","title","_ref2","addNewText","_this$props","props","addEditText","id","todo","_this2","this","_this$state","_this$props2","toggleCompleteStatus","toggleRemoveTodo","editingTodo","editing","react_default","a","createElement","key","uniqueId","className","type","onChange","checked","completed","htmlFor","onDoubleClick","onClick","onSubmit","onBlur","autoFocus","React","Component","TodoList","todoListFiltered","map","component_TodoItem","TodoFilter","toggleFilters","activeFilter","href","App","todoList","textNewTodo","savedStorage","addNewTodo","event","preventDefault","idForTodos","replace","prevState","concat","Object","toConsumableArray","handleNewTodoText","_objectSpread","toggleCompleteAllStatus","some","active","filter","_ref3","toggleRemoveAllCompleted","_ref4","editText","_ref5","preparedlocalSrotage","fromEntries","entries","localStorage","preparedState","JSON","parse","getItem","handleFormSubmit","setItem","stringify","_this$state2","activeTodoCounter","item","length","placeholder","Fragment","component_TodoList","component_TodoFilter","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7c962642.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst _ = require('lodash');\nconst classNames = require('classnames');\n\nclass TodoItem extends React.Component {\n  state = {\n    editedText: '',\n    isEditing: false,\n  };\n\n  handleEditedText = ({ target: { value } }) => {\n    this.setState({\n      editedText: value,\n    });\n  }\n\n  activateEditing = (title) => {\n    this.setState(({ isEditing }) => ({\n      editedText: title,\n      isEditing: !isEditing,\n    }));\n  }\n\n  addNewText = () => {\n    const { addEditText, todo: { id } } = this.props;\n    const { editedText } = this.state;\n\n    addEditText(editedText, id);\n  }\n\n  render() {\n    const { editedText, isEditing } = this.state;\n\n    const {\n      todo,\n      toggleCompleteStatus,\n      toggleRemoveTodo,\n    } = this.props;\n    const editingTodo = classNames({ editing: isEditing });\n\n    return (\n      <li key={_.uniqueId('todo_')} className={editingTodo}>\n        <div className=\"view\">\n          <input\n            key={_.uniqueId('')}\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => toggleCompleteStatus(todo.id)}\n            id={todo.id}\n            checked={todo.completed}\n          />\n          <label\n            htmlFor=\"todo-1\"\n            className={todo.completed ? 'toggle_line-through' : ''}\n            onDoubleClick={() => this.activateEditing(todo.title)}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => toggleRemoveTodo(todo.id)}\n          />\n        </div>\n        <form onSubmit={this.addNewText} onBlur={this.addNewText}>\n          <input\n            onChange={this.handleEditedText}\n            value={editedText}\n            type=\"text\"\n            className=\"edit\"\n            autoFocus\n          />\n        </form>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  toggleCompleteStatus: PropTypes.func.isRequired,\n  toggleRemoveTodo: PropTypes.func.isRequired,\n  addEditText: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nconst _ = require('lodash');\n\nconst TodoList = ({\n  todoListFiltered,\n  toggleCompleteStatus,\n  toggleRemoveTodo,\n  addEditText,\n}) => (\n  <ul className=\"todo-list\">\n    {\n      todoListFiltered.map(todo => (\n        <TodoItem\n          todo={todo}\n          toggleCompleteStatus={toggleCompleteStatus}\n          toggleRemoveTodo={toggleRemoveTodo}\n          addEditText={addEditText}\n          key={_.uniqueId('todo-item_')}\n        />\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todoListFiltered: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })\n  ).isRequired,\n  toggleCompleteStatus: PropTypes.func.isRequired,\n  toggleRemoveTodo: PropTypes.func.isRequired,\n  addEditText: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst TodoFilter = ({\n  toggleFilters,\n  activeFilter,\n}) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={activeFilter === 'All' ? 'selected' : ''}\n        onClick={() => toggleFilters()}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={activeFilter === 'Active' ? 'selected' : ''}\n        onClick={() => toggleFilters('Active')}\n      >\n          Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={activeFilter === 'Completed' ? 'selected' : ''}\n        onClick={() => toggleFilters('Completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  toggleFilters: PropTypes.func.isRequired,\n  activeFilter: PropTypes.string.isRequired,\n};\n\nexport default TodoFilter;\n","import React from 'react';\n\nimport TodoList from './component/TodoList';\nimport TodoFilter from './component/TodoFilter';\n\nconst _ = require('lodash');\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    todoListFiltered: [],\n    textNewTodo: '',\n    activeFilter: 'All',\n    savedStorage: false,\n  };\n\n  componentDidMount() {\n    const preparedlocalSrotage = Object\n      .fromEntries(Object.entries(localStorage));\n    const preparedState = {};\n\n    for (let state in preparedlocalSrotage) {\n      if (state !== null) {\n        preparedState[state] = JSON.parse(localStorage.getItem(state));\n      }\n    }\n\n    if (preparedState.savedStorage) {\n      this.setState({\n        ...preparedState,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.handleFormSubmit();\n  }\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    const idForTodos = _.uniqueId('todo_');\n\n    if (this.state.textNewTodo.replace(/\\s/g, '') !== '') {\n      this.setState(prevState => ({\n        todoList: [...prevState.todoList,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n\n        todoListFiltered: [...prevState.todoListFiltered,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n        textNewTodo: '',\n        savedStorage: true,\n      }));\n    }\n  };\n\n  handleNewTodoText = ({ target: { value } }) => {\n    this.setState({\n      textNewTodo: value.replace(/^\\s+/, ''),\n    });\n  };\n\n  toggleCompleteStatus = (id) => {\n    const { activeFilter } = this.state;\n\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n\n      todoListFiltered: todoListFiltered.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n    }));\n\n    if (activeFilter === 'Completed') {\n      this.toggleFilters('Completed');\n    }\n\n    if (activeFilter === 'Active') {\n      this.toggleFilters('Active');\n    }\n  };\n\n  toggleCompleteAllStatus = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoListFiltered\n        .map(todo => ({\n          ...todo,\n          completed: prevState.todoListFiltered\n            .some(todo => !todo.completed),\n        })),\n      todoList: prevState.todoList\n        .map(todo => ({\n          ...todo,\n          completed: prevState.todoList\n            .some(todo => !todo.completed),\n        })),\n    }));\n  };\n\n  toggleFilters = (active) => {\n    switch (active) {\n      case 'Active': this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .filter(todo => !todo.completed),\n        activeFilter: 'Active',\n      }));\n        break;\n      case 'Completed': this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .filter(todo => todo.completed),\n        activeFilter: 'Completed',\n      }));\n        break;\n      default: this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .map(todo => ({ ...todo })),\n        activeFilter: 'All',\n      }));\n    }\n  };\n\n  toggleRemoveTodo = (id) => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (todo.id !== id)),\n      todoListFiltered: todoListFiltered.filter(todo => (todo.id !== id))\n    }));\n  };\n\n  toggleRemoveAllCompleted = () => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (!todo.completed)),\n      todoListFiltered: todoListFiltered.filter(todo => (!todo.completed)),\n    }));\n  };\n\n  addEditText = (editText, id) => {\n    this.setState(({ todoListFiltered, todoList }) => ({\n      todoList: todoList.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: editText,\n          };\n        }\n\n        return todo;\n      }),\n      todoListFiltered: todoListFiltered.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: editText,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  handleFormSubmit() {\n    const {\n      todoList,\n      todoListFiltered,\n      savedStorage,\n    } = this.state;\n\n    localStorage.setItem('savedStorage',\n      JSON.stringify(savedStorage));\n    localStorage.setItem('todoList',\n      JSON.stringify(todoList));\n    localStorage.setItem('todoListFiltered',\n      JSON.stringify(todoListFiltered));\n  }\n\n  render() {\n    const {\n      textNewTodo,\n      todoListFiltered,\n      activeFilter,\n      todoList,\n    } = this.state;\n    const activeTodoCounter = todoList.filter(item => !item.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addNewTodo}>\n            <input\n              value={textNewTodo}\n              onChange={this.handleNewTodoText}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          {!!todoList.length && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={this.toggleCompleteAllStatus}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <TodoList\n            addEditText={this.addEditText}\n            todoListFiltered={todoListFiltered}\n            toggleCompleteStatus={this.toggleCompleteStatus}\n            toggleRemoveTodo={this.toggleRemoveTodo}\n          />\n        </section>\n\n        {\n          !!todoList.length && (\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {activeTodoCounter }\n                {' '}\n                item\n                {activeTodoCounter !== 1 && 's'}\n                {' '}\n                left\n              </span>\n\n              <TodoFilter\n                toggleFilters={this.toggleFilters}\n                activeFilter={activeFilter}\n              />\n\n              {\n                !!todoList.some(todo => todo.completed) && (\n                  <button\n                    type=\"button\"\n                    className=\"clear-completed\"\n                    onClick={this.toggleRemoveAllCompleted}\n                  >\n                    Clear completed\n                  </button>\n                )\n              }\n\n            </footer>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
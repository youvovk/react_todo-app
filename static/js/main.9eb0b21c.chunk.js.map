{"version":3,"sources":["component/TodoItem.js","component/TodoList.js","component/TodoFilter.js","App.js","index.js"],"names":["_","require","TodoItem","_ref","todo","toggleCompleteStatus","toggleRemoveTodo","react_default","a","createElement","key","uniqueId","className","type","onChange","id","checked","completed","htmlFor","title","onClick","TodoList","todoListFiltered","map","component_TodoItem","TodoFilter","toggleFilters","activeFilter","href","App","state","todoList","textNewTodo","addNewTodo","event","preventDefault","idForTodos","_this","replace","setState","prevState","concat","Object","toConsumableArray","handleNewTodoText","value","target","_ref2","_objectSpread","toggleCompleteAllStatus","some","active","filter","_ref3","toggleRemoveAllCompleted","_ref4","JSON","parse","localStorage","getItem","this","handleFormSubmit","_this$state","setItem","stringify","_this$state2","countedLeft","item","length","onSubmit","placeholder","Fragment","component_TodoList","style","display","component_TodoFilter","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9eb0b21c.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst _ = require('lodash');\n\nconst TodoItem = ({\n  todo,\n  toggleCompleteStatus,\n  toggleRemoveTodo,\n}) => (\n  <li key={_.uniqueId('todo_')} className=\"\">\n    <div className=\"view\">\n      <input\n        key={_.uniqueId('')}\n        type=\"checkbox\"\n        className=\"toggle\"\n        onChange={() => toggleCompleteStatus(todo.id)}\n        id={todo.id}\n        checked={todo.completed}\n      />\n      <label\n        htmlFor=\"todo-1\"\n        className={todo.completed ? 'toggle_line-through' : ''}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => toggleRemoveTodo(todo.id)}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  toggleCompleteStatus: PropTypes.func.isRequired,\n  toggleRemoveTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nconst _ = require('lodash');\n\nconst TodoList = ({\n  todoListFiltered,\n  toggleCompleteStatus,\n  toggleRemoveTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {\n      todoListFiltered.map(todo => (\n        <TodoItem\n          todo={todo}\n          toggleCompleteStatus={toggleCompleteStatus}\n          toggleRemoveTodo={toggleRemoveTodo}\n          key={_.uniqueId('todo-item_')}\n        />\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todoListFiltered: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })\n  ).isRequired,\n  toggleCompleteStatus: PropTypes.func.isRequired,\n  toggleRemoveTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst TodoFilter = ({\n  toggleFilters,\n  activeFilter,\n}) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={activeFilter === 'All' ? 'selected' : ''}\n        onClick={() => toggleFilters('All')}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={activeFilter === 'Active' ? 'selected' : ''}\n        onClick={() => toggleFilters('Active')}\n      >\n          Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={activeFilter === 'Completed' ? 'selected' : ''}\n        onClick={() => toggleFilters('Completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  toggleShowActive: PropTypes.func.isRequired,\n  toggleShowAll: PropTypes.func.isRequired,\n  toggleShowCompleted: PropTypes.func.isRequired,\n  activeFilter: PropTypes.bool.isRequired,\n};\n\nexport default TodoFilter;\n","import React from 'react';\n\nimport TodoList from './component/TodoList';\nimport TodoFilter from './component/TodoFilter';\n\nconst _ = require('lodash');\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    todoListFiltered: [],\n    textNewTodo: '',\n    activeFilter: 'All',\n  };\n\n  componentDidMount() {\n    const todoList = JSON\n      .parse(localStorage.getItem('todoList'));\n    const todoListFiltered = JSON\n      .parse(localStorage.getItem('todoList'));\n\n    this.setState({\n      todoList,\n      todoListFiltered,\n    });\n  }\n\n  componentDidUpdate() {\n    this.handleFormSubmit();\n  }\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    const idForTodos = _.uniqueId('todo_');\n\n    if (this.state.textNewTodo.replace(/\\s/g, '') !== '') {\n      this.setState(prevState => ({\n        todoList: [...prevState.todoList,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n\n        todoListFiltered: [...prevState.todoListFiltered,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n        textNewTodo: '',\n      }));\n    }\n  };\n\n  handleNewTodoText = ({ target: { value } }) => {\n    this.setState({\n      textNewTodo: value.replace(/^\\s+/, ''),\n    });\n  };\n\n  toggleCompleteStatus = (id) => {\n    const { activeFilter } = this.state;\n\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n\n      todoListFiltered: todoListFiltered.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n    }));\n\n    if (activeFilter === 'Completed') {\n      this.toggleFilters('Completed');\n    }\n\n    if (activeFilter === 'Active') {\n      this.toggleFilters('Active');\n    }\n  };\n\n  toggleCompleteAllStatus = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoListFiltered\n        .map(todo => ({\n          ...todo,\n          completed: prevState.todoListFiltered\n            .some(todo => todo.completed === false),\n        })),\n      todoList: prevState.todoList\n        .map(todo => ({\n          ...todo,\n          completed: prevState.todoList\n            .some(todo => todo.completed === false),\n        })),\n    }));\n  };\n\n  toggleFilters = (active) => {\n    if (active === 'All') {\n      this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .map(todo => ({ ...todo })),\n        activeFilter: 'All',\n      }));\n    }\n\n    if (active === 'Active') {\n      this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .filter(todo => todo.completed === false),\n        activeFilter: 'Active',\n      }));\n    }\n\n    if (active === 'Completed') {\n      this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .filter(todo => todo.completed === true),\n        activeFilter: 'Completed',\n      }));\n    }\n  };\n\n  toggleRemoveTodo = (id) => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (todo.id !== id)),\n      todoListFiltered: todoListFiltered.filter(todo => (todo.id !== id))\n    }));\n  };\n\n  toggleRemoveAllCompleted = () => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (!todo.completed)),\n      todoListFiltered: todoListFiltered.filter(todo => (!todo.completed)),\n    }));\n  };\n\n  handleFormSubmit() {\n    const {\n      todoList,\n      todoListFiltered,\n    } = this.state;\n\n    localStorage.setItem('todoList',\n      JSON.stringify(todoList));\n    localStorage.setItem('todoListFiltered',\n      JSON.stringify(todoListFiltered));\n  }\n\n  render() {\n    const {\n      textNewTodo,\n      todoListFiltered,\n      activeFilter,\n      todoList,\n    } = this.state;\n    const countedLeft = todoList.filter(item => !item.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addNewTodo}>\n            <input\n              value={textNewTodo}\n              onChange={this.handleNewTodoText}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          {!!todoList.length && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={this.toggleCompleteAllStatus}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <TodoList\n            todoListFiltered={todoListFiltered}\n            toggleCompleteStatus={this.toggleCompleteStatus}\n            toggleRemoveTodo={this.toggleRemoveTodo}\n          />\n        </section>\n\n        {\n          !!todoList.length && (\n            <footer className=\"footer\" style={{ display: 'block' }}>\n              <span className=\"todo-count\">\n                {countedLeft}\n                {' '}\n                item\n                {countedLeft !== 1 && 's'}\n                {' '}\n                left\n              </span>\n\n              <TodoFilter\n                toggleFilters={this.toggleFilters}\n                activeFilter={activeFilter}\n              />\n\n              {\n                !!todoList.some(todo => todo.completed) && (\n                  <button\n                    type=\"button\"\n                    className=\"clear-completed\"\n                    style={{ display: 'block' }}\n                    onClick={this.toggleRemoveAllCompleted}\n                  >\n                    Clear completed\n                  </button>\n                )\n              }\n\n            </footer>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
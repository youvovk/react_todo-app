{"version":3,"sources":["component/TodoItem.js","component/TodoList.js","component/TodoFilter.js","App.js","index.js"],"names":["_","require","TodoItem","_ref","todo","toggleCompleteStatus","toggleRemoveTodo","react_default","a","createElement","key","uniqueId","className","type","onChange","id","checked","completed","htmlFor","title","onClick","TodoList","todoListFiltered","toggleEditTodo","editedTodo","map","component_TodoItem","TodoFilter","toggleShowActive","toggleShowAll","toggleShowCompleted","activeFilter","href","App","state","todoList","textNewTodo","ruleForAllCompleted","addNewTodo","event","preventDefault","idForTodos","_this","replace","setState","prevState","concat","Object","toConsumableArray","handleNewTodoText","value","target","_ref2","_objectSpread","toggleCompleteAllStatus","some","filter","_ref3","toggleRemoveAllCompleted","_ref4","_this$state","this","countedLeft","item","length","onSubmit","placeholder","style","display","Fragment","component_TodoList","component_TodoFilter","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0da10479.chunk.js","sourcesContent":["import React from 'react';\n\nconst _ = require('lodash');\n\nconst TodoItem = ({ todo, toggleCompleteStatus, toggleRemoveTodo }) => {\n  return (\n    <li key={_.uniqueId('todo_')} className=\"\">\n      <div className=\"view\">\n        <input\n          key={_.uniqueId('')}\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => toggleCompleteStatus(todo.id)}\n          id={todo.id}\n          checked={todo.completed}\n        />\n        <label htmlFor=\"todo-1\" className={todo.completed ? 'toggle_line-through' : ''}>{todo.title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={() => toggleRemoveTodo(todo.id)} />\n      </div>\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\n\nimport TodoItem from './TodoItem';\n\nconst _ = require('lodash');\n\nconst TodoList = ({\n  todoListFiltered,\n  toggleCompleteStatus,\n  toggleRemoveTodo,\n  toggleEditTodo,\n  editedTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {\n      todoListFiltered.map(todo => (\n        <TodoItem\n          todo={todo}\n          toggleCompleteStatus={toggleCompleteStatus}\n          toggleRemoveTodo={toggleRemoveTodo}\n          toggleEditTodo={toggleEditTodo}\n          editedTodo={editedTodo}\n          key={_.uniqueId('todo-item_')}\n        />\n      ))\n    }\n  </ul>\n);\n\nexport default TodoList;\n","import React from 'react';\n\nconst TodoFilter = ({ toggleShowActive, toggleShowAll, toggleShowCompleted, activeFilter }) => (\n  (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={activeFilter === false ? 'selected' : ''}\n          onClick={toggleShowAll}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={activeFilter === 'Active' ? 'selected' : ''}\n          onClick={toggleShowActive}\n        >\n            Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={activeFilter === 'Completed' ? 'selected' : ''}\n          onClick={toggleShowCompleted}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  )\n);\n\nexport default TodoFilter;\n","import React from 'react';\n\nimport TodoList from './component/TodoList';\nimport TodoFilter from './component/TodoFilter';\n\nconst _ = require('lodash');\n//const classNames = require('classnames');\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    todoListFiltered: [],\n    textNewTodo: '',\n    ruleForAllCompleted: true,\n    activeFilter: false,\n  };\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    const idForTodos = _.uniqueId('todo_');\n\n    if (this.state.textNewTodo.replace(/\\s/g, '') !== '') {\n      this.setState(prevState => ({\n        todoList: [...prevState.todoList,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n        todoListFiltered: [...prevState.todoListFiltered,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n        textNewTodo: '',\n      }));\n    }\n  };\n\n  handleNewTodoText = ({ target: { value } }) => {\n    this.setState({\n      textNewTodo: value.replace(/^\\s+/, ''),\n    });\n  };\n\n  toggleCompleteStatus = (id) => {\n    const { activeFilter } = this.state;\n\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n      todoListFiltered: todoListFiltered.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n    }));\n\n    if (activeFilter === 'Completed') {\n      this.toggleShowCompleted();\n    }\n\n    if (activeFilter === 'Active') {\n      this.toggleShowActive();\n    }\n  };\n\n  toggleCompleteAllStatus = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoListFiltered\n        .map(todo => ({ ...todo,\n          completed: prevState.todoListFiltered\n            .some(todo => todo.completed === false) ? true : false })),\n      todoList: prevState.todoList\n        .map(todo => ({ ...todo,\n          completed: prevState.todoList\n            .some(todo => todo.completed === false) ? true : false })),\n      ruleForAllCompleted: !prevState.ruleForAllCompleted,\n    }));\n  };\n\n  toggleShowAll = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoList\n        .map(todo => ({ ...todo })),\n      activeFilter: false,\n    }));\n  };\n\n  toggleShowActive = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoList\n        .filter(todo => todo.completed === false),\n      activeFilter: 'Active',\n    }));\n  };\n\n  toggleShowCompleted = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoList\n        .filter(todo => todo.completed === true),\n      activeFilter: 'Completed',\n    }));\n  };\n\n  toggleRemoveTodo = (id) => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (todo.id !== id)),\n      todoListFiltered: todoListFiltered.filter(todo => (todo.id !== id))\n    }));\n  };\n\n  toggleRemoveAllCompleted = () => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (!todo.completed)),\n      todoListFiltered: todoListFiltered.filter(todo => (!todo.completed)),\n    }));\n  };\n\n  render() {\n    const {\n      textNewTodo,\n      todoListFiltered,\n      activeFilter,\n      todoList,\n    } = this.state;\n    const countedLeft = todoListFiltered.filter(item => !item.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addNewTodo}>\n            <input\n              value={textNewTodo}\n              onChange={this.handleNewTodoText}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          {\n            !!todoList.length && (\n              <>\n                <input\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                  onChange={this.toggleCompleteAllStatus}\n                />\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\n              </>\n            )\n          }\n\n          <TodoList\n            todoListFiltered={todoListFiltered}\n            toggleCompleteStatus={this.toggleCompleteStatus}\n            toggleRemoveTodo={this.toggleRemoveTodo}\n          />\n        </section>\n\n        {\n          !!todoList.length && (\n            <footer className=\"footer\" style={{ display: 'block' }}>\n              <span className=\"todo-count\">\n                {countedLeft}\n                {' '}\n                item\n                {countedLeft !== 1 && 's'}\n                {' '}\n                left\n              </span>\n\n              <TodoFilter\n                toggleShowActive={this.toggleShowActive}\n                toggleShowAll={this.toggleShowAll}\n                toggleShowCompleted={this.toggleShowCompleted}\n                activeFilter={activeFilter}\n              />\n\n              {\n                !!todoList.some(todo => todo.completed) && (\n                  <button\n                    type=\"button\"\n                    className=\"clear-completed\"\n                    style={{ display: 'block' }}\n                    onClick={this.toggleRemoveAllCompleted}\n                  >\n                    Clear completed\n                  </button>\n                )\n              }\n\n            </footer>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
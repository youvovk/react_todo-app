{"version":3,"sources":["component/TodoItem.js","component/TodoList.js","component/TodoFilter.js","App.js","index.js"],"names":["_","require","classNames","TodoItem","state","editedText","isEditing","handleEditedText","_ref","value","target","_this","setState","replace","activateEditing","title","_ref2","addNewText","event","preventDefault","_this$props","props","addEditText","id","todo","_this2","this","_this$state","_this$props2","toggleCompleteStatus","toggleRemoveTodo","editingTodo","editing","react_default","a","createElement","key","uniqueId","className","type","onChange","checked","completed","htmlFor","onDoubleClick","onClick","onSubmit","onBlur","autoFocus","React","Component","TodoList","todoListFiltered","map","component_TodoItem","TodoFilter","toggleFilters","activeFilter","href","App","todoList","textNewTodo","savedStorage","addNewTodo","idForTodos","prevState","concat","Object","toConsumableArray","handleNewTodoText","_objectSpread","toggleCompleteAllStatus","some","active","filter","_ref3","toggleRemoveAllCompleted","_ref4","editText","_ref5","preparedlocalSrotage","fromEntries","entries","localStorage","preparedState","JSON","parse","getItem","handleFormSubmit","setItem","stringify","_this$state2","activeTodoCounter","item","length","placeholder","Fragment","component_TodoList","component_TodoFilter","ReactDOM","render","src_App","document","getElementById"],"mappings":"kRAIMA,EAAIC,EAAQ,GACZC,EAAaD,EAAQ,IAyFZE,6MAtFbC,MAAQ,CACNC,WAAY,GACZC,WAAW,KAGbC,iBAAmB,SAAAC,GAA2B,IAAdC,EAAcD,EAAxBE,OAAUD,MAC9BE,EAAKC,SAAS,CACZP,WAAYI,EAAMI,QAAQ,OAAQ,SAItCC,gBAAkB,SAACC,GACjBJ,EAAKC,SAAS,SAAAI,GAAA,IAAGV,EAAHU,EAAGV,UAAH,MAAoB,CAChCD,WAAYU,EACZT,WAAYA,QAIhBW,WAAa,SAACC,GACZA,EAAMC,iBADgB,IAAAC,EAGgBT,EAAKU,MAAnCC,EAHcF,EAGdE,YAAqBC,EAHPH,EAGDI,KAAQD,GAG7BD,EAFuBX,EAAKP,MAApBC,WAEgBkB,4EAGjB,IAAAE,EAAAC,KAAAC,EAC2BD,KAAKtB,MAA/BC,EADDsB,EACCtB,WAAYC,EADbqB,EACarB,UADbsB,EAOHF,KAAKL,MAHPG,EAJKI,EAILJ,KACAK,EALKD,EAKLC,qBACAC,EANKF,EAMLE,iBAEIC,EAAc7B,EAAW,CAAE8B,QAAS1B,IAE1C,OACE2B,EAAAC,EAAAC,cAAA,MAAIC,IAAKpC,EAAEqC,SAAS,SAAUC,UAAWP,GACvCE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,SACEC,IAAKpC,EAAEqC,SAAS,IAChBE,KAAK,WACLD,UAAU,SACVE,SAAU,kBAAMX,EAAqBL,EAAKD,KAC1CA,GAAIC,EAAKD,GACTkB,QAASjB,EAAKkB,YAEhBT,EAAAC,EAAAC,cAAA,SACEQ,QAAQ,SACRL,UAAWd,EAAKkB,UAAY,sBAAwB,GACpDE,cAAe,kBAAMnB,EAAKX,gBAAgBU,EAAKT,SAE9CS,EAAKT,OAERkB,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLD,UAAU,UACVO,QAAS,kBAAMf,EAAiBN,EAAKD,QAGzCU,EAAAC,EAAAC,cAAA,QAAMW,SAAUpB,KAAKT,WAAY8B,OAAQrB,KAAKT,YAC5CgB,EAAAC,EAAAC,cAAA,SACEK,SAAUd,KAAKnB,iBACfE,MAAOJ,EACPkC,KAAK,OACLD,UAAU,OACVU,WAAS,aApEEC,IAAMC,WCDvBlD,EAAIC,EAAQ,GAoCHkD,EAlCE,SAAA3C,GAAA,IACf4C,EADe5C,EACf4C,iBACAvB,EAFerB,EAEfqB,qBACAC,EAHetB,EAGfsB,iBACAR,EAJed,EAIfc,YAJe,OAMfW,EAAAC,EAAAC,cAAA,MAAIG,UAAU,aAEVc,EAAiBC,IAAI,SAAA7B,GAAI,OACvBS,EAAAC,EAAAC,cAACmB,EAAD,CACE9B,KAAMA,EACNK,qBAAsBA,EACtBC,iBAAkBA,EAClBR,YAAaA,EACbc,IAAKpC,EAAEqC,SAAS,oBCwBXkB,EA1CI,SAAA/C,GAAA,IACjBgD,EADiBhD,EACjBgD,cACAC,EAFiBjD,EAEjBiD,aAFiB,OAIjBxB,EAAAC,EAAAC,cAAA,MAAIG,UAAU,WACZL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEuB,KAAK,KACLpB,UAA4B,QAAjBmB,EAAyB,WAAa,GACjDZ,QAAS,kBAAMW,MAHjB,QASFvB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEuB,KAAK,WACLpB,UAA4B,WAAjBmB,EAA4B,WAAa,GACpDZ,QAAS,kBAAMW,EAAc,YAH/B,WASFvB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEuB,KAAK,cACLpB,UAA4B,cAAjBmB,EAA+B,WAAa,GACvDZ,QAAS,kBAAMW,EAAc,eAH/B,mkBCzBN,IAAMxD,EAAIC,EAAQ,GAiRH0D,6MA9QbvD,MAAQ,CACNwD,SAAU,GACVR,iBAAkB,GAClBS,YAAa,GACbJ,aAAc,MACdK,cAAc,KAyBhBC,WAAa,SAAC7C,GACZA,EAAMC,iBACN,IAAM6C,EAAahE,EAAEqC,SAAS,SAEoB,KAA9C1B,EAAKP,MAAMyD,YAAYhD,QAAQ,MAAO,KACxCF,EAAKC,SAAS,SAAAqD,GAAS,MAAK,CAC1BL,SAAQ,GAAAM,OAAAC,OAAAC,EAAA,EAAAD,CAAMF,EAAUL,UAAhB,CACN,CACErC,GAAIyC,EACJjD,MAAOkD,EAAUJ,YACjBnB,WAAW,KAIfU,iBAAgB,GAAAc,OAAAC,OAAAC,EAAA,EAAAD,CAAMF,EAAUb,kBAAhB,CACd,CACE7B,GAAIyC,EACJjD,MAAOkD,EAAUJ,YACjBnB,WAAW,KAGfmB,YAAa,GACbC,cAAc,QAKpBO,kBAAoB,SAAA7D,GAA2B,IAAdC,EAAcD,EAAxBE,OAAUD,MAC/BE,EAAKC,SAAS,CACZiD,YAAapD,EAAMI,QAAQ,OAAQ,SAIvCgB,qBAAuB,SAACN,GAAO,IACrBkC,EAAiB9C,EAAKP,MAAtBqD,aAER9C,EAAKC,SAAS,SAAAI,GAAA,IAAG4C,EAAH5C,EAAG4C,SAAUR,EAAbpC,EAAaoC,iBAAb,MAAqC,CACjDQ,SAAUA,EAASP,IAAI,SAAC7B,GACtB,OAAIA,EAAKD,KAAOA,EACd+C,EAAA,GAAY9C,EAAZ,CAAkBkB,WAAYlB,EAAKkB,YAG9BlB,IAGT4B,iBAAkBA,EAAiBC,IAAI,SAAC7B,GACtC,OAAIA,EAAKD,KAAOA,EACd+C,EAAA,GAAY9C,EAAZ,CAAkBkB,WAAYlB,EAAKkB,YAG9BlB,OAIU,cAAjBiC,GACF9C,EAAK6C,cAAc,aAGA,WAAjBC,GACF9C,EAAK6C,cAAc,aAIvBe,wBAA0B,WACxB5D,EAAKC,SAAS,SAAAqD,GAAS,MAAK,CAC1Bb,iBAAkBa,EAAUb,iBACzBC,IAAI,SAAA7B,GAAI,OAAA8C,EAAA,GACJ9C,EADI,CAEPkB,UAAWuB,EAAUb,iBAClBoB,KAAK,SAAAhD,GAAI,OAAKA,EAAKkB,gBAE1BkB,SAAUK,EAAUL,SACjBP,IAAI,SAAA7B,GAAI,OAAA8C,EAAA,GACJ9C,EADI,CAEPkB,UAAWuB,EAAUL,SAClBY,KAAK,SAAAhD,GAAI,OAAKA,EAAKkB,sBAK9Bc,cAAgB,SAACiB,GACf,OAAQA,GACN,IAAK,SAAU9D,EAAKC,SAAS,SAAAqD,GAAS,MAAK,CACzCb,iBAAkBa,EAAUL,SACzBc,OAAO,SAAAlD,GAAI,OAAKA,EAAKkB,YACxBe,aAAc,YAEd,MACF,IAAK,YAAa9C,EAAKC,SAAS,SAAAqD,GAAS,MAAK,CAC5Cb,iBAAkBa,EAAUL,SACzBc,OAAO,SAAAlD,GAAI,OAAIA,EAAKkB,YACvBe,aAAc,eAEd,MACF,QAAS9C,EAAKC,SAAS,SAAAqD,GAAS,MAAK,CACnCb,iBAAkBa,EAAUL,SACzBP,IAAI,SAAA7B,GAAI,OAAA8C,EAAA,GAAU9C,KACrBiC,aAAc,aAKpB3B,iBAAmB,SAACP,GAClBZ,EAAKC,SAAS,SAAA+D,GAAA,IAAGf,EAAHe,EAAGf,SAAUR,EAAbuB,EAAavB,iBAAb,MAAqC,CACjDQ,SAAUA,EAASc,OAAO,SAAAlD,GAAI,OAAKA,EAAKD,KAAOA,IAC/C6B,iBAAkBA,EAAiBsB,OAAO,SAAAlD,GAAI,OAAKA,EAAKD,KAAOA,UAInEqD,yBAA2B,WACzBjE,EAAKC,SAAS,SAAAiE,GAAA,IAAGjB,EAAHiB,EAAGjB,SAAUR,EAAbyB,EAAazB,iBAAb,MAAqC,CACjDQ,SAAUA,EAASc,OAAO,SAAAlD,GAAI,OAAMA,EAAKkB,YACzCU,iBAAkBA,EAAiBsB,OAAO,SAAAlD,GAAI,OAAMA,EAAKkB,kBAI7DpB,YAAc,SAACwD,EAAUvD,GACa,KAAhCuD,EAASjE,QAAQ,MAAO,KAC1BF,EAAKC,SAAS,SAAAmE,GAAA,IAAG3B,EAAH2B,EAAG3B,iBAAH,MAAqC,CACjDQ,SADYmB,EAAqBnB,SACdP,IAAI,SAAC7B,GACtB,OAAIA,EAAKD,KAAOA,EACd+C,EAAA,GACK9C,EADL,CAEET,MAAO+D,IAIJtD,IAET4B,iBAAkBA,EAAiBC,IAAI,SAAC7B,GACtC,OAAIA,EAAKD,KAAOA,EACd+C,EAAA,GACK9C,EADL,CAEET,MAAO+D,IAIJtD,2FA9Jb,IAAMwD,EAAuBb,OAC1Bc,YAAYd,OAAOe,QAAQC,eACxBC,EAAgB,GAEtB,IAAK,IAAIhF,KAAS4E,EACF,OAAV5E,IACFgF,EAAchF,GAASiF,KAAKC,MAAMH,aAAaI,QAAQnF,KAIvDgF,EAActB,cAChBpC,KAAKd,SAAL0D,EAAA,GACKc,iDAMP1D,KAAK8D,8DAkJY,IAAA7D,EAKbD,KAAKtB,MAHPwD,EAFejC,EAEfiC,SACAR,EAHezB,EAGfyB,iBACAU,EAJenC,EAIfmC,aAGFqB,aAAaM,QAAQ,eACnBJ,KAAKK,UAAU5B,IACjBqB,aAAaM,QAAQ,WACnBJ,KAAKK,UAAU9B,IACjBuB,aAAaM,QAAQ,mBACnBJ,KAAKK,UAAUtC,qCAGV,IAAAuC,EAMHjE,KAAKtB,MAJPyD,EAFK8B,EAEL9B,YACAT,EAHKuC,EAGLvC,iBACAK,EAJKkC,EAILlC,aACAG,EALK+B,EAKL/B,SAEIgC,EAAoBhC,EAASc,OAAO,SAAAmB,GAAI,OAAKA,EAAKnD,YAAWoD,OAEnE,OACE7D,EAAAC,EAAAC,cAAA,WAASG,UAAU,WACjBL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,UAChBL,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAA,QAAMW,SAAUpB,KAAKqC,YACnB9B,EAAAC,EAAAC,cAAA,SACE1B,MAAOoD,EACPrB,SAAUd,KAAK2C,kBACf/B,UAAU,WACVyD,YAAY,6BAKlB9D,EAAAC,EAAAC,cAAA,WAASG,UAAU,UACdsB,EAASkC,QACV7D,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACE/D,EAAAC,EAAAC,cAAA,SACEI,KAAK,WACLhB,GAAG,aACHe,UAAU,aACVE,SAAUd,KAAK6C,0BAEjBtC,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,cAAf,yBAIJV,EAAAC,EAAAC,cAAC8D,EAAD,CACE3E,YAAaI,KAAKJ,YAClB8B,iBAAkBA,EAClBvB,qBAAsBH,KAAKG,qBAC3BC,iBAAkBJ,KAAKI,sBAKvB8B,EAASkC,QACT7D,EAAAC,EAAAC,cAAA,UAAQG,UAAU,UAChBL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,cACbsD,EACA,IAFH,OAIyB,IAAtBA,GAA2B,IAC3B,IALH,QASA3D,EAAAC,EAAAC,cAAC+D,EAAD,CACE1C,cAAe9B,KAAK8B,cACpBC,aAAcA,MAIZG,EAASY,KAAK,SAAAhD,GAAI,OAAIA,EAAKkB,aAC3BT,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLD,UAAU,kBACVO,QAASnB,KAAKkD,0BAHhB,4BA7PA3B,IAAMC,WCDxBiD,IAASC,OACPnE,EAAAC,EAAAC,cAACkE,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.49941ffa.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst _ = require('lodash');\nconst classNames = require('classnames');\n\nclass TodoItem extends React.Component {\n  state = {\n    editedText: '',\n    isEditing: false,\n  };\n\n  handleEditedText = ({ target: { value } }) => {\n    this.setState({\n      editedText: value.replace(/^\\s+/, ''),\n    });\n  }\n\n  activateEditing = (title) => {\n    this.setState(({ isEditing }) => ({\n      editedText: title,\n      isEditing: !isEditing,\n    }));\n  }\n\n  addNewText = (event) => {\n    event.preventDefault();\n\n    const { addEditText, todo: { id } } = this.props;\n    const { editedText } = this.state;\n\n    addEditText(editedText, id);\n  }\n\n  render() {\n    const { editedText, isEditing } = this.state;\n\n    const {\n      todo,\n      toggleCompleteStatus,\n      toggleRemoveTodo,\n    } = this.props;\n    const editingTodo = classNames({ editing: isEditing });\n\n    return (\n      <li key={_.uniqueId('todo_')} className={editingTodo}>\n        <div className=\"view\">\n          <input\n            key={_.uniqueId('')}\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => toggleCompleteStatus(todo.id)}\n            id={todo.id}\n            checked={todo.completed}\n          />\n          <label\n            htmlFor=\"todo-1\"\n            className={todo.completed ? 'toggle_line-through' : ''}\n            onDoubleClick={() => this.activateEditing(todo.title)}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => toggleRemoveTodo(todo.id)}\n          />\n        </div>\n        <form onSubmit={this.addNewText} onBlur={this.addNewText}>\n          <input\n            onChange={this.handleEditedText}\n            value={editedText}\n            type=\"text\"\n            className=\"edit\"\n            autoFocus\n          />\n        </form>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  toggleCompleteStatus: PropTypes.func.isRequired,\n  toggleRemoveTodo: PropTypes.func.isRequired,\n  addEditText: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nconst _ = require('lodash');\n\nconst TodoList = ({\n  todoListFiltered,\n  toggleCompleteStatus,\n  toggleRemoveTodo,\n  addEditText,\n}) => (\n  <ul className=\"todo-list\">\n    {\n      todoListFiltered.map(todo => (\n        <TodoItem\n          todo={todo}\n          toggleCompleteStatus={toggleCompleteStatus}\n          toggleRemoveTodo={toggleRemoveTodo}\n          addEditText={addEditText}\n          key={_.uniqueId('todo-item_')}\n        />\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todoListFiltered: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })\n  ).isRequired,\n  toggleCompleteStatus: PropTypes.func.isRequired,\n  toggleRemoveTodo: PropTypes.func.isRequired,\n  addEditText: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst TodoFilter = ({\n  toggleFilters,\n  activeFilter,\n}) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={activeFilter === 'All' ? 'selected' : ''}\n        onClick={() => toggleFilters()}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={activeFilter === 'Active' ? 'selected' : ''}\n        onClick={() => toggleFilters('Active')}\n      >\n          Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={activeFilter === 'Completed' ? 'selected' : ''}\n        onClick={() => toggleFilters('Completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  toggleFilters: PropTypes.func.isRequired,\n  activeFilter: PropTypes.string.isRequired,\n};\n\nexport default TodoFilter;\n","import React from 'react';\n\nimport TodoList from './component/TodoList';\nimport TodoFilter from './component/TodoFilter';\n\nconst _ = require('lodash');\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    todoListFiltered: [],\n    textNewTodo: '',\n    activeFilter: 'All',\n    savedStorage: false,\n  };\n\n  componentDidMount() {\n    const preparedlocalSrotage = Object\n      .fromEntries(Object.entries(localStorage));\n    const preparedState = {};\n\n    for (let state in preparedlocalSrotage) {\n      if (state !== null) {\n        preparedState[state] = JSON.parse(localStorage.getItem(state));\n      }\n    }\n\n    if (preparedState.savedStorage) {\n      this.setState({\n        ...preparedState,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.handleFormSubmit();\n  }\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    const idForTodos = _.uniqueId('todo_');\n\n    if (this.state.textNewTodo.replace(/\\s/g, '') !== '') {\n      this.setState(prevState => ({\n        todoList: [...prevState.todoList,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n\n        todoListFiltered: [...prevState.todoListFiltered,\n          {\n            id: idForTodos,\n            title: prevState.textNewTodo,\n            completed: false,\n          },\n        ],\n        textNewTodo: '',\n        savedStorage: true,\n      }));\n    }\n  };\n\n  handleNewTodoText = ({ target: { value } }) => {\n    this.setState({\n      textNewTodo: value.replace(/^\\s+/, ''),\n    });\n  };\n\n  toggleCompleteStatus = (id) => {\n    const { activeFilter } = this.state;\n\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n\n      todoListFiltered: todoListFiltered.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n    }));\n\n    if (activeFilter === 'Completed') {\n      this.toggleFilters('Completed');\n    }\n\n    if (activeFilter === 'Active') {\n      this.toggleFilters('Active');\n    }\n  };\n\n  toggleCompleteAllStatus = () => {\n    this.setState(prevState => ({\n      todoListFiltered: prevState.todoListFiltered\n        .map(todo => ({\n          ...todo,\n          completed: prevState.todoListFiltered\n            .some(todo => !todo.completed),\n        })),\n      todoList: prevState.todoList\n        .map(todo => ({\n          ...todo,\n          completed: prevState.todoList\n            .some(todo => !todo.completed),\n        })),\n    }));\n  };\n\n  toggleFilters = (active) => {\n    switch (active) {\n      case 'Active': this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .filter(todo => !todo.completed),\n        activeFilter: 'Active',\n      }));\n        break;\n      case 'Completed': this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .filter(todo => todo.completed),\n        activeFilter: 'Completed',\n      }));\n        break;\n      default: this.setState(prevState => ({\n        todoListFiltered: prevState.todoList\n          .map(todo => ({ ...todo })),\n        activeFilter: 'All',\n      }));\n    }\n  };\n\n  toggleRemoveTodo = (id) => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (todo.id !== id)),\n      todoListFiltered: todoListFiltered.filter(todo => (todo.id !== id))\n    }));\n  };\n\n  toggleRemoveAllCompleted = () => {\n    this.setState(({ todoList, todoListFiltered }) => ({\n      todoList: todoList.filter(todo => (!todo.completed)),\n      todoListFiltered: todoListFiltered.filter(todo => (!todo.completed)),\n    }));\n  };\n\n  addEditText = (editText, id) => {\n    if (editText.replace(/\\s/g, '') !== '') {\n      this.setState(({ todoListFiltered, todoList }) => ({\n        todoList: todoList.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              title: editText,\n            };\n          }\n\n          return todo;\n        }),\n        todoListFiltered: todoListFiltered.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              title: editText,\n            };\n          }\n\n          return todo;\n        }),\n      }));\n    }\n  }\n\n  handleFormSubmit() {\n    const {\n      todoList,\n      todoListFiltered,\n      savedStorage,\n    } = this.state;\n\n    localStorage.setItem('savedStorage',\n      JSON.stringify(savedStorage));\n    localStorage.setItem('todoList',\n      JSON.stringify(todoList));\n    localStorage.setItem('todoListFiltered',\n      JSON.stringify(todoListFiltered));\n  }\n\n  render() {\n    const {\n      textNewTodo,\n      todoListFiltered,\n      activeFilter,\n      todoList,\n    } = this.state;\n    const activeTodoCounter = todoList.filter(item => !item.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addNewTodo}>\n            <input\n              value={textNewTodo}\n              onChange={this.handleNewTodoText}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          {!!todoList.length && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={this.toggleCompleteAllStatus}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <TodoList\n            addEditText={this.addEditText}\n            todoListFiltered={todoListFiltered}\n            toggleCompleteStatus={this.toggleCompleteStatus}\n            toggleRemoveTodo={this.toggleRemoveTodo}\n          />\n        </section>\n\n        {\n          !!todoList.length && (\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {activeTodoCounter }\n                {' '}\n                item\n                {activeTodoCounter !== 1 && 's'}\n                {' '}\n                left\n              </span>\n\n              <TodoFilter\n                toggleFilters={this.toggleFilters}\n                activeFilter={activeFilter}\n              />\n\n              {\n                !!todoList.some(todo => todo.completed) && (\n                  <button\n                    type=\"button\"\n                    className=\"clear-completed\"\n                    onClick={this.toggleRemoveAllCompleted}\n                  >\n                    Clear completed\n                  </button>\n                )\n              }\n\n            </footer>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}